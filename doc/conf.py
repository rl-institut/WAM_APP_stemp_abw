# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
from unittest.mock import MagicMock

#sys.path.insert(0, os.path.abspath('..'))

# Add stemp tool to path:
STEMP_ABW_ROOT = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
sys.path.append(STEMP_ABW_ROOT)


# -- Module mocking required for RTD -----------------------------------------
class Mock(MagicMock):
    @classmethod
    def __getattr__(cls, name):
        return MagicMock()


MOCK_MODULES = [
    'django.contrib.gis.gdal',
    'django.contrib.gis.gdal.error',
    'django.contrib.gis.geos'
]

# UNCOMMENT TO BUILD DOCS LOCALLY (when building API docs this prevents import
# of DB data which is not supported on RTD; required locally as the WAM DB
# config file 'stemp_abw_config.cfg' (see below) is empty):
#os.environ['READTHEDOCS'] = 'True'

if 'READTHEDOCS' in os.environ:
    # Mock modules not available in RTD-build container:
    sys.modules.update((mod_name, Mock()) for mod_name in MOCK_MODULES)

# -- Symlinks and WAM config -------------------------------------------------
    # As stemp_abw is cloned under different name, we have to set up a symlink
    # Remove any RTD build relicts:
    print('Running RTD build commands for stemp ABW docs...')

    try:
        os.remove(os.path.join(STEMP_ABW_ROOT, 'stemp_abw'))
    except FileNotFoundError:
        pass
    except IsADirectoryError:
        pass

    # On RTD, the stemp package is installed in a directory named after the
    # current branch. To make the APIdocs work properly a symlink from this
    # branch directory to the expected module directory is necessary:
    BRANCH_DIR = os.path.dirname(os.path.dirname(__file__))
    try:
        os.symlink(
            BRANCH_DIR,
            os.path.join(STEMP_ABW_ROOT, 'stemp_abw')
        )
    except FileExistsError:
        pass

# Set WAM config manually:
os.environ['WAM_CONFIG_PATH'] = os.path.join(
    os.path.dirname(__file__),
    'stemp_abw_config.cfg'
)
os.environ['WAM_APPS'] = 'stemp_abw'

# -- Configure django --------------------------------------------------------
import django
os.environ['DJANGO_SETTINGS_MODULE'] = 'wam.settings'
django.setup()

# mock django's migrations module
# -> doesn't work, delete file api/stemp_abw.migrations.rst (and remove
# referencing line from stemp_abw.rst) instead before building)
#autodoc_mock_imports = ['stemp_abw.migrations']

# -- Project information -----------------------------------------------------

project = 'StEmp-ABW'
copyright = '2019, Reiner Lemoine Institut'
author = 'Reiner Lemoine Institut'

# The short X.Y version
from stemp_abw import __version__
version = __version__
# The full version, including alpha/beta/rc tags
release = __version__


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.viewcode',
    'sphinx.ext.napoleon',
    'sphinx.ext.extlinks',
    'sphinx.ext.graphviz'
]

# Napoleon settings
napoleon_google_docstring = True
napoleon_numpy_docstring = True
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = False
napoleon_include_special_with_apidoc = False
napoleon_use_admonition_for_examples = False
napoleon_use_admonition_for_notes = False
napoleon_use_admonition_for_references = False
napoleon_use_ivar = False
napoleon_use_param = True
napoleon_use_rtype = True
napoleon_use_keyword = False

# Dictionary of external links
extlinks = {'pandas':('https://pandas.pydata.org/pandas-docs/stable/reference/api/%s.html',
                      '')
            }

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store', 'whatsnew/*', 'files/*']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'StEmp-ABWdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc,
     'StEmp-ABW.tex',
     'StEmp-ABW Documentation',
     'Reiner Lemoine Institut',
     'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc,
     'stemp-abw',
     'StEmp-ABW Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc,
     'StEmp-ABW',
     'StEmp-ABW Documentation',
     author,
     'StEmp-ABW',
     'One line description of project.',
     'Miscellaneous'),
]


# -- Extension configuration -------------------------------------------------
